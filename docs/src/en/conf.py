#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# NOC Documentation documentation build configuration file, created by
# sphinx-quickstart on Tue Sep 19 10:20:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
# Python modules
import datetime
import subprocess
import os
import sys

# Attach NOC sources when necessary
NOC_SRC_PATH = os.getenv("NOC_SRC_PATH")
HAS_NOC_SRC = NOC_SRC_PATH and os.path.exists(NOC_SRC_PATH)

if HAS_NOC_SRC:
    NOC_SRC_PATH = os.path.abspath(NOC_SRC_PATH)
    sys.path.insert(0, NOC_SRC_PATH)


def get_branch():
    try:
        branch = subprocess.check_output(["git", "symbolic-ref", "--short", "HEAD"])
    except Exception:
        branch = "master"
    return branch


def get_language():
    return os.path.split(os.getcwd())[1]


#
year = datetime.date.today().year

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.todo",
    "sphinx.ext.extlinks",
    "sphinxcontrib.mermaid",
    "sphinxcontrib.httpdomain",
]
if HAS_NOC_SRC:
    # autoapi
    extensions += ["autoapi.extension"]
    autoapi_type = "python"
    autoapi_dirs = [NOC_SRC_PATH]
    autoapi_root = "src"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "contents"

# General information about the project.
project = "NOC"
copyright = "2007-{0}, The NOC Project".format(year)
author = "The NOC Project"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ""
# The full version, including alpha/beta/rc tags.
release = ""
#
branch = get_branch()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = get_language()

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# These paths are either relative to html_static_path
# or fully qualified paths (eg. https://...)
html_css_files = ["css/custom.css"]

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "NOCDocumentationdoc"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "NOCDocumentation.tex",
        "NOC Documentation Documentation",
        "The NOC Project",
        "manual",
    )
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "nocdocumentation", "NOC Documentation Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "NOCDocumentation",
        "NOC Documentation Documentation",
        author,
        "NOCDocumentation",
        "One line description of project.",
        "Miscellaneous",
    )
]


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]

#
extlinks = {
    "hardlink": ("https://docs.getnoc.com/{0}/%s".format(branch), ""),
    "issue": ("https://code.getnoc.com/noc/noc/issues/%s", ""),
    "mr": ("https://code.getnoc.com/noc/noc/merge_requests/%s", ""),
}

rst_epilog = "\n".join(
    [
        ".. |copy| unicode:: U+000A9",
        ".. |year| replace:: {0}".format(year),
        ".. |branch| replace:: {0}".format(branch),
    ]
)
# Mermaid settings
# The output format for Mermaid when building HTML files.
# This must be either 'raw' 'png' or 'svg'; the default is 'raw'.
# mermaid-cli is required if it's not raw
# Also note 'svg' support is very experimental in mermaid.
mermaid_output_format = os.environ.get("MERMAID_FORMAT", "raw")
# The command name with which to invoke mermaid-cli program.
# The default is 'mmdc'; you may need to set this to a full path
# if it's not in the executable search path.
# mermaid_cmd = 'mmdc'

# Google analytics settings
ga_tracking_id = os.environ.get("GA_TRACKING_ID", None)

# Customized HTML context
html_context = {"ga_tracking_id": ga_tracking_id}
