# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# noc.core.graph tests
# ----------------------------------------------------------------------
# Copyright (C) 2007-2019 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Third-party modules
import pytest
import networkx as nx

# NOC modules
from noc.core.graph.nexthop import iter_next_hops


@pytest.mark.parametrize(
    "edges,source,target,expected",
    [
        # 1 - 2
        ([(1, 2)], 1, 2, [(2, 2)]),
        # 1 - 2 - 3
        ([(1, 2), (2, 3)], 1, 3, [(2, 3)]),
        # Ring of 6
        ([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)], 1, 2, [(2, 2), (6, 6)]),
        ([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)], 1, 6, [(2, 6), (6, 2)]),
        ([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)], 1, 4, [(2, 4), (6, 4)]),
        # Full mesh of 4
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], 1, 2, [(2, 2), (3, 3), (4, 3)]),
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], 1, 3, [(2, 3), (3, 2), (4, 3)]),
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], 1, 4, [(2, 3), (3, 3), (4, 2)]),
        # Full mesh of 4 and tail
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 5)], 1, 2, [(2, 2), (3, 3), (4, 3)]),
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 5)], 1, 3, [(2, 3), (3, 2), (4, 3)]),
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 5)], 1, 4, [(2, 3), (3, 3), (4, 2)]),
        ([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 5)], 5, 3, [(1, 3)]),
        # Not connected clusters
        ([(1, 2), (3, 4)], 1, 2, [(2, 2)]),
        ([(1, 2), (3, 4)], 1, 3, []),
        ([(1, 2), (3, 4)], 1, 4, []),
    ],
)
def test_next_hop(edges, source, target, expected):
    # Build graph
    G = nx.Graph()
    for u, v in edges:
        G.add_edge(u, v)
    # Find next hops
    result = list(iter_next_hops(G, source, target))
    assert result == expected
